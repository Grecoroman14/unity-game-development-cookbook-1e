== GUIs

=== Working with UI controls
// card: https://trello.com/c/C6aVwKBn

===== Problem

You want to build a user interface for the player to work with.

===== Solution

. Open the GameObject menu, and choose UI -> Canvas.
. Open the GameObject menu again, and choose UI -> Text. A Text object will be added to the Canvas.
. Select the Rectangle tool, and drag the Text to resize and re-position it.
. Select the Text object, and modify the Text's properties to change its text.


. Create a new C# script called ButtonClicked.cs, and add the following code to it:

// snip: button_clicked

. Attach a +ButtonClicked+ component to the Canvas, or to any other game object - for the purposes of this example, it doesn't matter which.

. Open the GameObject menu one more time, and choose UI -> Button.
. Select the Button, and click the `+` button under the button's On Click component.
. Drag the object you attached the +ButtonClicked+ component to, into the new object field that appears.

    . In the function drop-down that now appears, choose ButtonClicked->ButtonWasClicked.

. Run the game. When you click the button, text will appear in the console.

. Stop the game, and click the `+` button again. Drag the same object in, and choose ButtonClicked->ButtonWasClickedWithParameter. Note how this method lets you specify a string to send when the button was clicked.

. Note also that the PrivateButtonWasClicked method never appears in the list of methods you can choose.

===== Discussion


Discuss how objects on the canvas have a Rect Transform, which defines their position as a rectangle within the context of the canvas.

Discuss how anchors work, and how they control how positioning and sizing work.

Discuss how the different anchor presets work.

Discuss the canvas modes (overlay, camera, world-space), and their differences.

Discuss the canvas scaler, its different modes, and what they're useful for.

Discuss how unity events work (the On Click handler on the button etc), including visibility, parameters, and how they work with properties.

=== Theming controls
// card: https://trello.com/c/OOrMFakO

===== Problem

You want to use your own artwork for your controls, rather the built-in Unity artwork. You want that art to be able to scale as the controls change size, without stretching.

===== Solution

. Start by importing the textures you want to use.
    . Ensure that the textures are configured to be imported as "Sprite / UI".

For this example, we'll customise a panel, using art from the open source UI asset kit by Kenney, available at http://kenney.nl/assets/ui-pack.

. Open the GameObject menu, and choose UI -> Panel.
    . Select the Panel game object, and change its Source Image to the +blue_panel+ image.

. Resize the panel, and you'll see that the image stretches (<<panel-stretch>>)

img: panel-stretch

To fix this, we need to set up the sprite so that only certain regions get stretched. In this texture, everything except the corners can be scaled without looking bad, so we'll set it up accordingly.

. Select the blue_panel texture.
. Click the Sprite Editor button.
. The Sprite Editor will appear. Drag the green dot that appears at the top of the screen down, until the green line is underneath the rounded corners of the image. You can also manually type in the change, by setting the border's +T+ value to 5.
. Repeat this process for the other three edges. When you're done, the sprite editor window should look like <<sprite-editor>>.

img: sprite-editor

. Click Apply, and close the Sprite Editor.
. Select the Panel object.
. Change the Image component's Image Type from Simple to Sliced.
. The stretched appearance will go away, because only the middle areas of the sprite are allowed to stretch, and the shape of the corners will be preserved (<<panel-stretch-fixed>>)

img: panel-stretch-fixed

===== Discussion



=== Animating the UI
// card: https://trello.com/c/4wzH30ML

===== Problem

You want to animate parts of the user interface.

===== Solution

We'll make a button spin when it's clicked.

. Open the GameObject menu, and choose UI -> Button.

. Create a new C# script called SpinButton.cs, and add the following code to it:

// snip: spin_button

. Attach a +SpinButton+ component to it.

. Click the `+` button in the On Click field.
    . Drag the button itself into the field.
    . In the popup menu, choose SpinButton->Spin.

. Run the game. When you click the button, it will spin around.

You can also adjust the curve to control the pacing of the animation, as well as its duration.

===== Discussion

Discuss animation curves. Discuss what 'evaluating' the curve means. Discuss the benefits of doing it this way, instead of incrementing the rotation every frame.

Discuss how objects in the canvas can be positioned and rotated just like other objects

Discuss how you can also animate their properties just like other objects.


=== Creating a list of items
// card: https://trello.com/c/K9ijXDmM

===== Problem

You want to create a scrolling list of UI items.

===== Solution

First, we'll create the container for the list.

. Create a scroll view by opening the GameObject menu and choosing UI->Scroll View.
. Select the Content object in the Scroll View. 
    . Add a Vertical Layout Group to it. 
        . Turn on the Width checkbox in Child Controls Size. This will make the objects inside the Content object expand their width to fill their parent, while still having control over their own height.
    . Add a Content Size Fitter component to it.
        . Set the Vertical Fit setting to Preferred Size. This will make the Content object adjust its height to be the total height of its children.

Next, we'll create our prototype list object.

. Create a Panel. Name it "List Item".
    . Drag the List Item onto the Content object in the Scroll View. It will resize to the width of the Content.
. Create a new Text object by opening the GameObject menu and choosing UI->Text.
    . Make it a child of the List Item.
    . Set its minimum anchor to (0,0), and its maximum anchor to (1,1). This will make it define its size relative to the width and height of its parent.
    . Set its Left, Top, Bottom and Right to 5. This will inset the Text by 5 pixels on all edges.

Next, we'll add some code that lets each list item manage its content.

. Create a new C# script called ListItem.cs. Add the following code to it:

// snip: list_item

. Add a ListItem script to the List Item.
    . Drag the Text into the Label Text field.

. Drag the List Item object from the hierarchy into the Project tab. This will create a prefab.
. Delete the List Item from the scene.

Finally, we'll add code that populates the list with instances of the List Item.

. Create a new C# script called List.cs. Add the following code to it:

// snip: list

. Add a List component to the scroll view. 
    . Drag the List Item prefab into its List Item Prefab slot.
    . Drag the Content object into its List Container slot.

. Run the game. The list will now contain a scrollable collection of items.

===== Discussion

Discuss what scroll views do, how they work, what they're composed of (content area, clip area, scroll views)

Discuss how layout groups work.



=== Fading out a list
// card: https://trello.com/c/ta4DtcYY

===== Problem

You want to manage a list of items that fade out some time after being removed.

===== Solution

. Start with the List example from the previous recipe.
. Duplicate the List Item prefab, and name the new prefab "Fading List Item".
. Select the Fading List Item prefab, and add a Canvas Group component. This will allow you to fade the entire object.

. Configure the List object to use the new Fading List Item.

. Add a new Button to the scene. 
    . Set its Text to read "Add Item".
    . Add a new entry in its On Click list. 
    . Drag the List object into its object field, and select the List -> CreateNewListItem method. 
    . Type "New List Item" into the text field.

. Create a new C# Script called FadeAfterDelay.cs, with the following code:

// snip: fade_after_delay

. Attach a +FadeAfterDelay+ component to the Fading List Item.

. Run the program. When you click the button, a new list item will appear; after a moment, it will fade out.


===== Discussion




=== Creating on-screen position indicators
// card: https://trello.com/c/TL3qYhNS

===== Problem


You want to display icons that highlight the position of objects on screen.

===== Solution

To display the indicators, we'll use Unity's GUI system. This means that we'll set up a canvas and a prototype indicator to use as a prefab.

You'll need a sprite to use for your indicators. If you don't have one, Kenney's game icons pack has a good one (http://www.kenney.nl/assets/game-icons).

. Create a new Canvas by opening the GameObject menu, and choosing UI -> Canvas.
. Create a new Image by opening the GameObject menu, and choosing UI -> Image.
. Set the sprite of the image to the sprite you want to use for your indicators.
. Rename the Image "Indicator".
. Drag the Indicator into the Project tab. This will create a prefab.
. Delete the Indicator from the scene.

Next, we'll create the code that creates, positions, and removes indicators as they're needed.

. Create a new C# script called IndicatorManager.cs, and add the following code to it:

// snip: indicator_manager

. Create an empty game object. Name it "Indicator Manager".
. Add an IndicatorManager component to the Indicator Manager.
. Drag the Canvas into the Indicator Container field.
. Drag the Indicator prefab into the Indicator Prefab field.

Next, we'll create a script that requests an indicator when it first appears, and removes it when it's removed from the scene.

. Create a new C# script called TrackedObject.cs, and add the following code to it:

// snip: tracked_object

Finally, we'll create an object that will have an indicator drawn over it.

. Create a new sphere by opening the GameObject menu, and choosing 3D Object -> Sphere.
. Move the sphere to somewhere where the camera can see it.
. Add a TrackedObject component to it.

. Run the game. An indicator will be drawn over it; when you move the sphere around, the indicator will follow it. If you move the sphere behind the camera, its indicator will move to the bottom of the screen; when you delete the sphere, the indicator will be removed as well. You can also add as many TrackedObjects to the scene as you'd like.

===== Discussion

Discuss how objects are destroyed when leaving play mode, and how that means that the OnDisable call requires a bit of care (see RemoveTrackingIndicator)

=== Custom editors
// card: https://trello.com/c/MeMTnS06

===== Problem

You want to customise the Inspector for a component.

===== Solution

We'll create a script that, when paired with a custom editor, allows you to quickly build a brick wall. When you add a Wall component, you'll specify the width and height of the wall, as well as a prefab to use for the brick. A button will in the inspector; when you click it, it will create bricks as child objects.

First, we'll create the brick prefab.

. Create a new Cube. Name it "Brick".
. Set its scale to (2, 1, 1).
. Drag it from the Hierarchy tab into the Project tab. This will create a new prefab.
. Delete the original Brick from the scene.

Next, we'll write the code for the wall. This file will contain two classes: one for the Wall component, and one for the custom editor.

. Create a new C# script called Wall.cs. Add the following code to it:

// snip: wall

. Create a new empty game object, called "Wall". Add a +Wall+ component to it.

. Drag the Brick prefab into the Brick Prefab slot.

. Click the Create Wall button. A wall of bricks will appear.

===== Discussion

Discuss how editors draw their contents.
Discuss GUILayout.
Discuss EditorGUILayout.
Discuss PropertyField.
Discuss GUILayout.Button, as well as some other methods in GUILayout and EditorGUILayout that produce fields.
Discuss how PrefabUtility.InstantiatePrefab differs from Instantiate (it maintains the prefab connection, Instantiate doesn't)



=== Property drawers
// card: https://trello.com/c/GyeyJX18

===== Problem

You want to customise how the Inspector draws variables of a certain type. For example, you've got a custom class, and you want to customise how it appears.

===== Solution

We'll demonstrate how to do this by defining a new type, called "MultiValue". This will contain a list of strings, of which one can be chosen in the Inspector.

. Create a new C# script called MultiValue. Add the following code to it:

// snip: multivalue

. Create a new empty game object, and call it "Demo".

. Create a new C# script called MultiValueDemo. Add the following code to it.

// snip: multivaluedemo

Note how the +MultiValue+ property looks like <<property-drawer-original>>.

img: property-drawer-original

Next, add the following code to the end of MultiValue.cs.

// snip: multivalue_editor

When you return to Unity, the Inspector will look like <<property-drawer-custom>>. You can select a string from the bar at the top of the property, and modify the available strings as well. If you add more properties to the +MultiValueDemo+ class, they will be displayed as per normal.

img: property-drawer-custom

===== Discussion

Discuss how normally Unity draws the child properties of a class

Discuss how you need to do all of it yourself if you override it

Discuss how PropertyDrawers can't use EditorGUILayout, but must use EditorGUI instead, which means you need to specify the rectangles yourself

=== Attribute drawers
// card: https://trello.com/c/iSoIDoTN

===== Problem

You want to customise how the Inspector draws a type of variable when a certain attribute is attached to it. For example, the +Header+ attribute causes Unity to draw a label above a variable in the Inspector.


===== Solution

We'll add an attribute that lets you draw a help box above variables, like so:

// snip: helpbox_demo

This code produces the following Inspector: <<property-attribute>>

img: property-attribute

To create the +HelpBox+ attribute, create a new C# script called HelpBox.cs, and add the following code to it:

// snip: helpbox_attribute

===== Discussion

note how you can call the HelpBoxAttribute just "HelpBox" in your code - it works just fine

=== Asset processing
// card: https://trello.com/c/44Ubj2DP

===== Problem

You want to customise how Unity imports certain files. 

===== Solution

Let's set up an asset post-processor that automatically sets up any texture whose filename ends in "_n", "_nrm" or "_normal" as a normal map.

. Create a new C# script called NormalMapTextureImporter.cs, and add the following code:

// snip: asset_preprocessor

. Take a texture that contains a normal map - if you don't have one, a useful generator of normal map textures can be found at https://cpetry.github.io/NormalMap-Online/ - and rename it so that its name ends with "_n".

. Import this texture into your project. The pr

===== Discussion

Discuss common naming patterns in texture filenames (_d = diffuse, _e = emissive, _n = normal, etc)

Discuss the difference between pre-processing methods (like OnPreprocessTexture) and post-processing methods (ike OnPostProcessTexture).

=== Scripted importers
// card: https://trello.com/c/nhi9erP9

===== Problem

You want to write code that lets Unity import a new type of file.

===== Solution

In this example, we'll make a custom importer that allows Unity to recognize text files whose file names end in ".cube", which contain JSON data that describes the size and colour of a cube.

Let's begin by creating an asset that we'll then write an importer for.

. Open your favourite text editor, and create a new empty file. (If you don't have a favourite editor, open Visual Studio, and choose New -> File. Make a new empty file.)

. Put the following code in the file:

// snip-file: Test.cube

. Save the file as "Test.cube", in your Unity project's Assets folder.

. Go to Unity. Note that while your Test.cube file is visible in the Assets folder, it's not usable in your project, because Unity doesn't know what to do with ".cube" files.

. Create a new C# script, and enter the following code:

// snip: cube_importer

. Return to Unity. Your Test.cube file will now be imported. It now contains three assets usable by Unity: a mesh, a material, and a game object that uses the mesh and material. You can drag the file into the scene, just like any other model.

===== Discussion

Discuss what this technique lets you do - define your own custom formats, add support for files that Unity doesn't have by default.


=== Wizards
// card: https://trello.com/c/FI6nVBmY

===== Problem

You want to create and display a window in the Unity Editor that lets the user provide some values, and runs code when the user clicks a button.

===== Solution

Let's create a wizard that creates a cube, and also creates a new material that uses a specified colour, all in a single click of a button.

. Create a new C# scipt called CreateCubeWizard.cs, and add the following code to it:

// snip: cube_wizard

. Open the GameObject menu, and note that you'll see a new menu entry: "Cube with Color". Click it.

. Enter your cube size and color, and click create.

. A new cube will be added to the scene, a new material will be created with the colour, and the cube will be set up to use the new material.

===== Discussion

Discuss what wizards can do, and what they're useful for.

Discuss the broader UnityEditor API, and what you can do with it (lots of opportunity for automation.)
